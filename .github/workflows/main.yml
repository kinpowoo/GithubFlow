name: Build and Release APK
on:
  push:
    branches:
      - main

jobs:
  build_and_release_apk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Get version name
        id: get_version_name
        run: echo "::set-output name=version_name::$(grep 'versionName' app/build.gradle | cut -d '"' -f2)"

      - name: Clean output directory
        run: rm -rf app/build/outputs/*

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build release APK
        run: ./gradlew assembleGoogleRelease -PversionCode=${{ github.run_number }}
        working-directory: .

      - name: Sign APK
        run: |
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 \
          -keystore $KEYSTORE_FILE \
          -storepass $KEYSTORE_PASSWORD \
          -keypass $KEY_PASSWORD \
          $(find app/build/outputs/apk/google/release -name "*.apk") $KEY_ALIAS
        env:
          KEYSTORE_FILE: ${{ secrets.KEYSTORE_PATH }}
          KEYSTORE_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        working-directory: .

      - name: Print Tree
        run: tree app/build/outputs/apk/
        working-directory: .
        
      - name: Rename and upload APK
        id: rename_and_upload_apk
        run: |
         apk_file=$(find app/build/outputs/apk/google/release -name "*.apk" -printf "%T+ %p\n" | sort -r | head -n1 | cut -d' ' -f2-)
         echo "APK file path: $apk_file"
         echo "::set-output name=path::$apk_file"

      - name: Do something with APK
        run: echo ${{ steps.rename_and_upload_apk.outputs.path }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          tag_name: v${{ steps.get_version_name.outputs.version_name }}
          release_name: Release v${{ steps.get_version_name.outputs.version_name }}
          body: |
            Changes in this release:
            - Bug fixes
          draft: false
          prerelease: false

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: $(find app/build/outputs/apk/google/release -name "*.apk" -printf "%T+ %p\n" | sort -r | head -n1 | cut -d' ' -f2-)
          asset_name: Neakasa-v${{ steps.get_version_name.outputs.version_name }}.${{ github.run_number }}.apk
          asset_content_type: application/vnd.android.package-archive
